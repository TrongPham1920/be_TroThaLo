swagger: "2.0"
info:
  title: Gin-GORM-Redis API
  description: This is a sample Gin server with GORM and Redis
  version: "1.0"
  contact: {}
paths:
  /users:
    get:
      description: Get a list of all users
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/models.User"
      summary: Get all users
    post:
      consumes:
        - application/json
      description: Create a new user
      parameters:
        - description: User data
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/CreateUserRequest"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/models.User"
      summary: Create a new user
  /users/{id}:
    delete:
      description: Delete a specific user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a user by ID
    get:
      description: Get a specific user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.User"
      summary: Get a user by ID
    put:
      consumes:
        - application/json
      description: Update a specific user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
        - description: User data
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/models.User"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.User"
      summary: Update a user by ID
  /users/{id}/status:
    put:
      description: Change the status of a user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
        - description: New status
          in: query
          name: status
          required: true
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/models.User"
        "400":
          description: Bad Request
          schema:
            type: object
            properties:
              code:
                type: integer
              mess:
                type: string
        "404":
          description: User not found
          schema:
            type: object
            properties:
              code:
                type: integer
              mess:
                type: string
        "500":
          description: Internal Server Error
          schema:
            type: object
            properties:
              code:
                type: integer
              mess:
                type: string
definitions:
  models.User:
    type: object
    properties:
      id:
        type: integer
      email:
        type: string
      name:
        type: string
      avatar:
        type: string
      role:
        type: integer
      status:
        type: integer
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      deleted_at:
        type: string
        format: date-time
  CreateUserRequest:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
